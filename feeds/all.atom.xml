<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Zombiecalypse the Blog</title><link href="http://zombiecalypse.github.com/Blog/" rel="alternate"></link><link href="http://zombiecalypse.github.com/Blog/feeds/all.atom.xml" rel="self"></link><id>http://zombiecalypse.github.com/Blog/</id><updated>2013-01-15T00:00:00+01:00</updated><entry><title>Delegated Voting and Classical Theorists III</title><link href="http://zombiecalypse.github.com/Blog/2013/Jan/delegated-voting-and-classical-theorists-iii.html" rel="alternate"></link><updated>2013-01-15T00:00:00+01:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2013-01-15:2013/Jan/delegated-voting-and-classical-theorists-iii.html</id><summary type="html">&lt;p&gt;This continues the series on 
&lt;a href="http://zombiecalypse.github.com/Blog/2013/Jan/delegated-voting-and-classical-theorists-ii.html"&gt;delegated voting and classical&amp;nbsp;theories&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Tocqueville&lt;/h2&gt;
&lt;p&gt;Tocqueville argues against too much democracy of a state, because it fails to protect minorities against the despotism of the majority. Further, it leads to dull leaders, because the sharp ones are put off by being a puppet to the public and short terms lead to preferring short-sighted to long-term&amp;nbsp;solutions. &lt;/p&gt;
&lt;h3&gt;Short-sighted&amp;nbsp;legislates&lt;/h3&gt;
&lt;p&gt;Compared to regular indirect democracies, this is even more problematic with delegated voting: the &amp;#8220;term&amp;#8221; of elected officials could potentially be arbitrary short for every domain to which the delegation principle extends (which I will assume to be only the&amp;nbsp;legislature). &lt;/p&gt;
&lt;p&gt;As Ernesto Dal Bó and Martin Rossi show (&lt;a href="http://www.nber.org/papers/w14511"&gt;&lt;em&gt;Term Length and Political Performance&lt;/em&gt;&lt;/a&gt;), being held accountable frequently in the form of elections will decrease the performance consistently across several metrics contrary to what models (by Barro and Ferejohn) would imply, as they argue due to time horizon effects - there is less incentive to invest in the long term, if one might never see it, especially since it might harm the popularity in the short&amp;nbsp;term. &lt;/p&gt;
&lt;p&gt;It remains to be seen if this effect reoccurs in a delegates voting system, where there is no fixed term and no election binary, but while these differences are significant and could well turn the effect around, as it is this remains a possible disadvantage of system that is, should it occur, inherent to&amp;nbsp;it.&lt;/p&gt;
&lt;h3&gt;Protection of&amp;nbsp;Minorities&lt;/h3&gt;
&lt;p&gt;Tocqueville (and Mills similarly) further argues, that a democracy needs to take additional measures to protect minorities, because the leaders and the public opinion push in the same direction. If one is opposed to that direction, one faces not only legal consequences, but also social disapproval. The reverse is even more true: a norm might quickly ascend to a law in a direct democracy, as seen with the minaret&amp;nbsp;initiative. &lt;/p&gt;
&lt;p&gt;This problem however is not one that is inherent to liquid democracy and more connected to direct democracy in general. The measures against it are well studies, such as a additional barrier in changing the most fundamental laws, the&amp;nbsp;constitution. &lt;/p&gt;
&lt;p&gt;Often enough, the interpretation of these laws of minimal consensus is not as clear as one would hope - one might even argue that the consensus was only found by leaving the interpretation somewhat open. So even if there was some corpus of laws that we accept as fundamental and eternal, then we would still need an instance that provides a binding interpretation. According to Tocqueville, this instance has to be independent from any public&amp;nbsp;influence.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It is very easy to defend liquid democracy from a participatory standpoint, but as we have seen, the concept fits very well into the classical theories of Locke and Rousseau.  It also shares the weaknesses as described by Tocqueville which can not be completely&amp;nbsp;dismissed. &lt;/p&gt;
&lt;p&gt;Liquid democracy might therefore well have been the conclusion of the social contact thought experiments if they took modern technology into&amp;nbsp;account.&lt;/p&gt;</summary></entry><entry><title>Delegated Voting and Classical Theorists I</title><link href="http://zombiecalypse.github.com/Blog/2013/Jan/delegated-voting-and-classical-theorists-i.html" rel="alternate"></link><updated>2013-01-13T00:00:00+01:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2013-01-13:2013/Jan/delegated-voting-and-classical-theorists-i.html</id><summary type="html">&lt;p&gt;As the modern idea of democracy rose to its contemporary positive connotation,
many theorists held that direct democracy was the ideal, but impractical. Locke&amp;nbsp;said &lt;/p&gt;
&lt;p&gt;&lt;em&gt;[&amp;#8230;] For if the consent of the majority shall not, in reason, be received as the act of the whole, and conclude every individual; nothing but the consent of every individual can make any thing to be the act of the whole: but such a consent is next to impossible ever to be had, if we consider the infirmities of health, and avocations of business, which in a number, though much less than that of a commonwealth, will necessarily keep many away from the public assembly. [&amp;#8230;]&lt;/em&gt; (Sect. 98 Second Treatise of&amp;nbsp;Government)&lt;/p&gt;
&lt;p&gt;and for Rousseau, only
a small community ensures happiness for its members, because he held it
impossible to have immediate contact in a larger context. These constraints do
not apply as much as they did when the theories were first developed -
geographical distance is but a minor inconvenience in the information age. In
reaction to the possibilities that this gives society, delegated voting
(&lt;em&gt;Designing a Democratic System Based on Voluntary Vote-Delegation&lt;/em&gt;,  James
Green-Armytage) as an alternative  to or synthesis of both representative and
direct systems had been proposed. In this essay I will analyse how the novel
idea fits into the framework that were the basis for the first modern
democratic systems in America and France - &lt;strong&gt;Locke&lt;/strong&gt; and &lt;strong&gt;Rousseau&lt;/strong&gt;. As I firmly believe that one has to
test their theories against the strongest opponents, I will also add &lt;strong&gt;Tocqueville&lt;/strong&gt; to the list of proponents I will compare&amp;nbsp;to. &lt;/p&gt;
&lt;h2&gt;Delegated&amp;nbsp;Voting&lt;/h2&gt;
&lt;p&gt;Before comparing it to classical approaches, I will shortly introduce the
concept of delegated voting. Like other approaches, every citizen has one vote
and as in a direct democratic setting, this vote can be cast on issues of
public interest, not only for candidates. The novel approach is that the vote
can be transferred from one person to another, that is, I can not only cast my
vote directly for an proposal, but also for the opinion of another fellow
voter, so that they not only decide where their own vote goes, but also where
the votes of the people who vote for them go. I might choose that my expertise
is not sufficient of an issue and lay my trust on an expert, thus closing the
gap between direct voting and&amp;nbsp;representation. &lt;/p&gt;
&lt;p&gt;To this goal it has also been proposed that the delegation can be restricted to
a specific field of expertise. This of course leads to a significant power to
those able to define the category of a proposal. Even now, where the influence
is only an informal one, the framing of an proposal can make or break it. If
the minaret initiative had been discussed as an issue of personal freedom or
business interests (how many jobs could be created by building a minaret in
each village), the proposal might well have taken a different turn. Adding to
that that different people decide on the proposal, depending on what aspect is
chosen, one can only imagine how significant this decision would have&amp;nbsp;been.&lt;/p&gt;
&lt;h2&gt;Locke&lt;/h2&gt;
&lt;p&gt;In Locke&amp;#8217;s &lt;em&gt;Two Treatises on Government&lt;/em&gt; he sets up a scenario of an anarchical
society and argues that for granted property rights and justice, such a society
would introduce a social contract and erect a government. He further argues
that this government would be an representative democracy, because the parties
of the social contract could not decide in a collective, that is a direct
democracy is only possible in a small community. The validity of his argument
can be seen in that even in Switzerland, policy decisions are seldom decided by
the people and for most questions of public interest, its directness is only&amp;nbsp;theoretical. &lt;/p&gt;
&lt;p&gt;This could be changed with todays technology, a public discourse of the whole
population can take place in the time a law is proposed until the decision is
made. Public media and especially the internet allow a voter to get many
relevant information. A politically interested citizen can be as informed as
politicians about issues of their choosing. Even politicians can hardly know
every nuance of an issue. Often highly technical issues are decided by people,
who only understand them from a second hand perspective. Locke asserts, that a
politician can find a well rounded view on every decision, but that I think
ceased to be the case, if it ever was. To decide for example, if the patent law
needs to be revised, we&amp;#8217;d first need to understand what 
the current laws allow, what causes problems and finally what law could prevent these problems. The first assessment alone would take a person years, or weeks&amp;nbsp;optimistically. &lt;/p&gt;
&lt;p&gt;Since Locke based his treatises on a thought experiment resulting in a social contract, I propose to go through the steps of reasoning in the light of advancing technology. In the natural state, humans are free and generally respectful to each other, but exploitation exists and needs to be accounted for. Without laws, everyone is legislature and judge in one, which leads to unfairness and insecurity about what to expect from each other. This culminates in the people agreeing on a social contract, in which they pass this power to a newly created entity - the state. However, the people would not give that freedom away, without retaining as much as possible, so that the goal of a unified legislature and judiciary is still achieved. For this reason, it would not make sense to give away the right to decide on policy, except for practical considerations.&lt;br /&gt;
&lt;/p&gt;
&lt;p&gt;While Locke was the Father of the the democracies of England and America, the continental European democracies developed under heavy influence of Rousseau. What he would have said can be found &lt;a href="http://zombiecalypse.github.com/Blog/2013/Jan/delegated-voting-and-classical-theorists-ii.html"&gt;here&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Delegated Voting and Classical Theorists II</title><link href="http://zombiecalypse.github.com/Blog/2013/Jan/delegated-voting-and-classical-theorists-ii.html" rel="alternate"></link><updated>2013-01-13T00:00:00+01:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2013-01-13:2013/Jan/delegated-voting-and-classical-theorists-ii.html</id><summary type="html">&lt;p&gt;This continues the series on 
&lt;a href="http://zombiecalypse.github.com/Blog/2013/Jan/delegated-voting-and-classical-theorists-i.html"&gt;delegated voting and classical&amp;nbsp;theories&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Rousseau&lt;/h2&gt;
&lt;p&gt;Contrary to Locke, who purposes a indirect government in order to extend it to a sufficiently big area, Rousseau held that this was actually a reason, why states should not extend beyond local communities. He assumed that this would lead to less corrupted human beings, who would easily find a consensus. At first glance, it seems ridiculous to say that the internet and other communication technologies would lead humankind to a more natural and more empathic state, one only needs to look at the average discussion on the Web to at least doubt that. Then again, Rousseau failed to provide a proof for his claim in the first place, so what the&amp;#8221;natural human being&amp;#8221; would do is still very much up to&amp;nbsp;discussion. &lt;/p&gt;
&lt;p&gt;We can however analyse how delegated voting would influence the communication structure that would lead to a political decision. For this, one needs to look at the ways, the public can communicate with their leaders today: the media could pick up the story to bring it to the attention of the politicians, but the incentive to do do requires the story to be interesting and concrete. One could also contact the politician directly, but due to the personal distance, one might decide not to do so, if the issue is not very&amp;nbsp;pressing. &lt;/p&gt;
&lt;p&gt;This direct way of communication would be influenced by the voting system, because one would typically choose delegates that one trusts. It is of course easier to extend trust to people one reckons to know, so many delegates will be from the personal environment of the voter. This at least comes closer than a national state with a parliament to Rousseau&amp;#8217;s ideal&amp;nbsp;order. &lt;/p&gt;
&lt;p&gt;However, the transitivity of the delegation might remove the person, who actually makes the decision, even further from the voter. It might well be the case that the voter has no personal connection to the delegate and might not even have heard of&amp;nbsp;them. &lt;/p&gt;
&lt;p&gt;In The Social Contract, Rousseau argues that no law is legit unless it is the people, who decided on it. For this, delegate voting offers a more realistic implementation than plainly voting every issue: through delegates, one does not need to invest information cost for voting, if one does not wish&amp;nbsp;to. &lt;/p&gt;
&lt;p&gt;In conclusion I would say that, while not as clearly as Locke, Rousseau would be in favour of a delegated voting&amp;nbsp;system. &lt;/p&gt;
&lt;p&gt;In the &lt;a href="http://zombiecalypse.github.com/Blog/2013/Jan/delegated-voting-and-classical-theorists-iii.html"&gt;next part&lt;/a&gt; &lt;strong&gt;Tocqueville&lt;/strong&gt; will get his say - who argued that there is a
something as too much democracy and surely wouldn&amp;#8217;t be a huge fan of delegated&amp;nbsp;voting.&lt;/p&gt;</summary></entry><entry><title>Sinatra Story</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html" rel="alternate"></link><updated>2012-10-09T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-09:2012/Oct/sinatra-story.html</id><summary type="html">&lt;h2&gt;The Sinatra Web Framework for&amp;nbsp;Beginners&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/installing-ruby-and-sinatra.html"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatrastory.html"&gt;Getting&amp;nbsp;Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/the-story-of-how-i-built-a-model.html"&gt;Creating a&amp;nbsp;Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/putting-modifying-and-the-rest.html"&gt;Updating and&amp;nbsp;Deleting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/user-sessions-and-layouts.html"&gt;Adding&amp;nbsp;Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/testing.html"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/modularity.html"&gt;Modularity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/handling-files.html"&gt;File&amp;nbsp;Handling&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>Handling Files</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/handling-files.html" rel="alternate"></link><updated>2012-10-08T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-08:2012/Oct/handling-files.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html"&gt;Sinatra Story&lt;/a&gt;&amp;nbsp;series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is not necessarily Sinatra or Ruby or &lt;span class="caps"&gt;HAML&lt;/span&gt; related, but the question of
how to handle file upload pops up sooner or&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;So our texts might profit from illustrations, that set the mood and act as
the cover from which the texts will be judged.&amp;nbsp;Brainstorming:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pictures should be&amp;nbsp;optional.&lt;/li&gt;
&lt;li&gt;Pictures should be located on the hard disk of the server, so that Ruby
   doesn&amp;#8217;t use up all the&amp;nbsp;&lt;span class="caps"&gt;RAM&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;There should be a limit for the file size. Lets say &lt;code&gt;400kB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The image belongs to the text, therefore the texts are not the leaves of
   our application. This implies, that we have URLs like &lt;code&gt;/text/1/&lt;/code&gt; instead
   of &lt;code&gt;/text/1&lt;/code&gt;. Yeah, that kind of details sometimes are&amp;nbsp;important.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Model&lt;/h2&gt;
&lt;p&gt;By 2., we should not give a list of &lt;code&gt;File&lt;/code&gt;s to the &lt;code&gt;Text&lt;/code&gt;, but rather a list
of file&amp;nbsp;paths. &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:image_paths&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="vi"&gt;@image_paths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;View&lt;/h2&gt;
&lt;p&gt;As it turns out, 3. can not simply be checked on the client side (&lt;span class="caps"&gt;HTML5&lt;/span&gt; +
JavaScript can, but that&amp;#8217;s out of the scope of this text). However, 4.
influences the View part: Files should be uploaded in the edit form for the
texts, and since we use markdown in the texts, relative links should be
possible with a&amp;nbsp;simple&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="sx"&gt;![alt](image.jpg)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which tells us, that the controller urls should be something like
&lt;code&gt;/text/:id/:img&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lets add a form in the &lt;code&gt;edit.haml&lt;/code&gt; to upload&amp;nbsp;images.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;...
&lt;span class="nt"&gt;%h2&lt;/span&gt; Upload
&lt;span class="nt"&gt;%form&lt;/span&gt;(&lt;span class="na"&gt;action =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/text/#{@text.id}/images&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;POST&lt;/span&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;enctype=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;multipart/form-data&amp;quot;&lt;/span&gt;)
  &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;file&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file_upload&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;accept=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;image/*&amp;quot;&lt;/span&gt;)
  &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;upload&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The form part should be familiar, except for the &lt;code&gt;enctype&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enctype&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be &lt;code&gt;multipart/form-data&lt;/code&gt; for file&amp;nbsp;upload.&lt;/li&gt;
&lt;li&gt;There is an input type &lt;code&gt;file&lt;/code&gt;, which lets the user choose a file from their&amp;nbsp;machine.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;accept&lt;/code&gt; option tells the browser, that the user should only choose
  image files. This leads to the file-choosing dialog does only display those
  files. They might still upload all kind of crap, but it&amp;#8217;s still useful for&amp;nbsp;users.&lt;/li&gt;
&lt;li&gt;There is no standard way to tell the form about our 400kB size&amp;nbsp;limit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Controller&lt;/h2&gt;
&lt;p&gt;The difficult part comes in the controller. On one hand, we need to implement
an upload route and on the other hand a route that gives back the&amp;nbsp;image.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id/images&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;editable?&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:file_upload&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id/images/:pic&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the thing about files in sinatra is that you get a temporary file on your
server, but also the original file name. The &lt;code&gt;file&lt;/code&gt; variable in the route
skeleton is a hash, that contains among other things a &lt;code&gt;:filename&lt;/code&gt; and a
&lt;code&gt;:tempfile&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;When we save the image to the disk, we want a consistent naming, that does not 
let different texts images interfere with each other. To make that consistent,
we define a helper&amp;nbsp;function:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;id_image_to_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The complete path on the disks might be &lt;code&gt;public/images/...&lt;/code&gt; (doesn&amp;#8217;t really
matter, people wont usually see this), create these&amp;nbsp;folders.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id/images&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:file_upload&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;413&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tempfile&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;

  &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;id_image_to_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:filename&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="no"&gt;FileUtils&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tempfile&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="n"&gt;redirect&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/text/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;413&lt;/code&gt; is the code for &lt;code&gt;Data sent to server is too large&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileUtils&lt;/code&gt; is a standard ruby module, which gives nice functions to deal
  with files, for example to copy&amp;nbsp;them.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;:tempfile&lt;/code&gt; is saved somewhere on the disk and &lt;code&gt;.path&lt;/code&gt; tells us&amp;nbsp;where.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File.join(...)&lt;/code&gt; interleaves the argument with the right separator for the
  operating system (i.e. &lt;code&gt;\&lt;/code&gt; on Windows and &lt;code&gt;/&lt;/code&gt; on the other&amp;nbsp;systems).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other route needs to access the same file and send it&amp;nbsp;back:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id/images/:pic&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;send_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id_image_to_filename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pic&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;send_file&lt;/code&gt; takes a local file path and sends the file&amp;nbsp;back.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&amp;#8217;s it! Try uploading a file and accessing &lt;code&gt;![alt](image/something.jpg)&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;input type="file"&amp;gt;&lt;/code&gt; gives a form field that uploads a&amp;nbsp;file.&lt;/li&gt;
&lt;li&gt;You can add an expected file type with &lt;code&gt;accept="..."&lt;/code&gt;, where &lt;code&gt;...&lt;/code&gt; is a
    &lt;span class="caps"&gt;MIME&lt;/span&gt;&amp;nbsp;type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;enctype="multipart/form-data&lt;/code&gt; must be included in the form&amp;nbsp;definition.&lt;/li&gt;
&lt;li&gt;The uploaded file is given as a dictionary with its original file name in
  &lt;code&gt;:filename&lt;/code&gt; and a temp file in &lt;code&gt;:tempfile&lt;/code&gt;. You can copy the file by the
  path or use the data&amp;nbsp;directly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;send_file&lt;/code&gt; sends back a (binary)&amp;nbsp;file.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Modularity</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/modularity.html" rel="alternate"></link><updated>2012-10-07T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-07:2012/Oct/modularity.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html"&gt;Sinatra Story&lt;/a&gt;&amp;nbsp;series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Look at &lt;a href="https://github.com/zombiecalypse/SinatraStory/tree/master/iteration05"&gt;the code of the last iteration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Up to this point, we just threw new classes, new models, new tests, and new
routes into a few files. This works for small projects, but in a team it is
&lt;em&gt;very&lt;/em&gt; problematic if everybody works on the same files. So lets change&amp;nbsp;that!&lt;/p&gt;
&lt;p&gt;One file should solve one problem. Usually that means that there is exactly one
class in it, but with routes, it could look a bit&amp;nbsp;different.&lt;/p&gt;
&lt;p&gt;We notice some changes, that we could&amp;nbsp;do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Split the &lt;code&gt;models.rb&lt;/code&gt; file into a &lt;code&gt;text.rb&lt;/code&gt; and an &lt;code&gt;user.rb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Split the &lt;code&gt;controller.rb&lt;/code&gt; into an &lt;code&gt;authentication.rb&lt;/code&gt; and a
  &lt;code&gt;text_controller.rb&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Split the &lt;code&gt;tests.rb&lt;/code&gt; into &lt;code&gt;user_test.rb&lt;/code&gt; and &lt;code&gt;server_test.rb&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This seems simple enough and it turns out, aside from the second point, it
really&amp;nbsp;is.&lt;/p&gt;
&lt;h2&gt;Model&lt;/h2&gt;
&lt;p&gt;So lets first take the&amp;nbsp;model:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# models.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bcrypt&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we can split this up&amp;nbsp;into:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# app/models/text.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Models&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# app/models/user.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bcrypt&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Models&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You can define name spaces with &lt;code&gt;module&lt;/code&gt;. You could also add another name
  space with your application&amp;nbsp;name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now instead of including &lt;code&gt;models&lt;/code&gt;, we would include &lt;code&gt;app/models/user.rb&lt;/code&gt; or
&lt;code&gt;app/models/text.rb&lt;/code&gt;. Because of the name space, we would need to access the
classes via &lt;code&gt;Models::User&lt;/code&gt;, which is very cumbersome, so we &lt;code&gt;include&lt;/code&gt; the
&lt;code&gt;Models&lt;/code&gt; name space into the active one to get that out of the&amp;nbsp;way.&lt;/p&gt;
&lt;h2&gt;Tests&lt;/h2&gt;
&lt;p&gt;We had one test file, that included everything from everywhere. We can&amp;nbsp;transform&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# tests.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# includes all models:&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;controller.rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# only used by server test:&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rack/test&amp;#39;&lt;/span&gt;

  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Methods&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Server&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;can be transformed&amp;nbsp;into&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# user_test.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# explicit about includes:&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../app/model/user.rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../app/model/text.rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# include module&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Models&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# server_test.rb&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# This time, we need the text controller:&lt;/span&gt;
  &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../app/controller/text_controller.rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rack/test&amp;#39;&lt;/span&gt;

&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Methods&lt;/span&gt;
&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Controllers&lt;/span&gt;

&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Server&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Controllers&lt;/h2&gt;
&lt;p&gt;This is actually a bit more difficult. If you looked at the 
&lt;a href="http://www.sinatrarb.com/documentation"&gt;Sinatra documentation&lt;/a&gt;, there are two
ways of doing things: The classic approach, that we took before and the modular.
With the modular approach, we define modules (actually classes) for controllers
and can then plug them&amp;nbsp;together.&lt;/p&gt;
&lt;p&gt;First of all, the &lt;code&gt;require 'sinatra'&lt;/code&gt; has to go, it sets up everything for a
classic application, something we explicitly don&amp;#8217;t want it to do.  Instead, we
define controller classes, that inherit from &lt;code&gt;Sinatra::Base&lt;/code&gt; in the
&lt;code&gt;sinatra/base&lt;/code&gt; file. But surely, we need some configuration constants, like
for example the location of the &lt;code&gt;views&lt;/code&gt; folder. For this, place the following
in the root directory and include it in every&amp;nbsp;file:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# config.rb&lt;/span&gt;
&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="no"&gt;Views&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;views&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fortunately the &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; definitions are relatively easy to
take appart into the different classes, so we can&amp;nbsp;define&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Controllers&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Authentication&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Sinatra&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
    &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Helpers&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;user&lt;/span&gt;
        &lt;span class="vi"&gt;@user&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;helpers&lt;/span&gt; &lt;span class="no"&gt;Sinatra&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ContentFor&lt;/span&gt;
    &lt;span class="n"&gt;helpers&lt;/span&gt; &lt;span class="no"&gt;Helpers&lt;/span&gt;
    &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Views&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You typically need to include the helper methods of extensions with
  &lt;code&gt;helpers&lt;/code&gt;. The argument must be a module, not a&amp;nbsp;class.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;views&lt;/code&gt; folder must be set manually. If this bothers you, you can write
  a minimal subclass of &lt;code&gt;Sinatra::Base&lt;/code&gt; that does exactly this and subclass
  every of your controllers from&amp;nbsp;that.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;@user&lt;/code&gt; variable is not visible from outside this class, but the
  &lt;code&gt;#user&lt;/code&gt; method can be used. It must be packed into a module, that can later
  be included via &lt;code&gt;helpers&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;TextController&lt;/code&gt; will use some things of the Authentication controller,
namely the &lt;code&gt;user&lt;/code&gt;. Be sure to include the &lt;code&gt;authentication.rb&lt;/code&gt; and then declare
the &lt;code&gt;Authentication&lt;/code&gt; helpers.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# text_controller.rb&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TextController&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Sinatra&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;helpers&lt;/span&gt; &lt;span class="no"&gt;Sinatra&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ContentFor&lt;/span&gt;
  &lt;span class="n"&gt;helpers&lt;/span&gt; &lt;span class="no"&gt;Authentication&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Helpers&lt;/span&gt;
  &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Views&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, you need to edit all the views and replace &lt;code&gt;@user&lt;/code&gt; with &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;main.rb&lt;/code&gt; file at the root of your directory, you need to include all
controllers and define a main application which uses the other classes.
Finally, you run that&amp;nbsp;class.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;Sinatra&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Base&lt;/span&gt;
  &lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="ss"&gt;:sessions&lt;/span&gt;
  &lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:views&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Views&lt;/span&gt;
  &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Controllers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Authentication&lt;/span&gt;
  &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="no"&gt;Controllers&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TextController&lt;/span&gt;

  &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try it, fix the errors, repeat, but this should allow you to make modular
Sinatra applications. You should also consider to move views for different
controllers into different folders, you can do that with &lt;code&gt;:'path/to/view'&lt;/code&gt; in
the controller. Have&amp;nbsp;fun!&lt;/p&gt;</summary></entry><entry><title>Testing</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/testing.html" rel="alternate"></link><updated>2012-10-06T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-06:2012/Oct/testing.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html"&gt;Sinatra Story&lt;/a&gt;&amp;nbsp;series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Up to this point, I always felt kinda bad, because I always had to start up the
server and go through all the pages in order to catch errors (there always are).
The solution to that is of course to automate that. Since I don&amp;#8217;t have a
clicking robot, I&amp;#8217;ll fake this by sending requests directly. This is possible
by the &lt;code&gt;rack&lt;/code&gt; testing library. Also I will use the &lt;code&gt;rspec&lt;/code&gt; testing library,
because it doubles as documentation, and provides the very handy &lt;code&gt;should&lt;/code&gt;
method.&lt;/p&gt;
&lt;p&gt;For structure, we use a different file, e.g. &lt;code&gt;tests.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="n"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;controller.rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rack/test&amp;#39;&lt;/span&gt;
&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Rack&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Methods&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the nice thing about &lt;code&gt;rspec&lt;/code&gt; is that it looks very much like natural
language. First you say, what you test, then &amp;#8212; if you want &amp;#8212; you define
different contexts in which the thing you test can be, and finally, you say
what &lt;code&gt;it&lt;/code&gt; should be able to&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;However &lt;code&gt;rspec&lt;/code&gt; is a separate executable from &lt;code&gt;ruby&lt;/code&gt;, so before you do this,
you should &lt;code&gt;gem install rspec&lt;/code&gt; and when you&amp;#8217;re done, execute the tests with
&lt;code&gt;rspec &amp;lt;file&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Lets start with unit-testing, so stick to one class for as long as you can.
For a User e.g. &amp;#8220;Tom&amp;#8221;, we know&amp;nbsp;that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it can create&amp;nbsp;texts&lt;/li&gt;
&lt;li&gt;it can be found by&amp;nbsp;name&lt;/li&gt;
&lt;li&gt;it can remove texts by their&amp;nbsp;id&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Further, the&amp;nbsp;database&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;can tell if a user can&amp;nbsp;login&lt;/li&gt;
&lt;li&gt;can list all&amp;nbsp;users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is the structure of our&amp;nbsp;test: &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can create texts&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can be found by his name&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can remove texts by id&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Database&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can tell if a user can login&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can list all users&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Usually, we also want to create some conditions before the tests are run, for
example creating some users, &amp;#8230; We can do this with the &lt;code&gt;before&lt;/code&gt; method which
comes in two flavours: &lt;code&gt;before(:all)&lt;/code&gt;, which is executed before any of the
tests run, and &lt;code&gt;before(:each)&lt;/code&gt;, which runs before each of the test&amp;nbsp;methods.&lt;/p&gt;
&lt;p&gt;For example, to set up the user &amp;#8220;Tom&amp;#8221;, we can add this to the &lt;code&gt;context "Tom"&lt;/code&gt;
block.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:all&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;
      &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset&lt;/span&gt;
      &lt;span class="vi"&gt;@tom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Tom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;
      &lt;span class="vi"&gt;@tom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;We clear the whole database and then add &lt;code&gt;@tom&lt;/code&gt; and save&amp;nbsp;him.&lt;/li&gt;
&lt;li&gt;Similarly you can define an &lt;code&gt;after(:each)&lt;/code&gt; or &lt;code&gt;after(:all)&lt;/code&gt; call.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now to implement &lt;code&gt;it "can create texts"&lt;/code&gt;, we can assume, that this &lt;code&gt;@tom&lt;/code&gt; is&amp;nbsp;given:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can create texts&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@tom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Humpty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Dumpty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@tom&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@tom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;texts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;every object has a &lt;code&gt;#should&lt;/code&gt; method, that accepts matchers (you can look
    them up &lt;a href="http://rubydoc.info/gems/rspec-expectations/2.4.0/RSpec/Matchers"&gt;here&lt;/a&gt;.).
  You probably need &lt;code&gt;eq(...)&lt;/code&gt; most&amp;nbsp;often.&lt;/li&gt;
&lt;li&gt;You can invert the test by the &lt;code&gt;#should_not&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To describe the Server&amp;#8217;s abilities, we notice, that there is no class that we
describe. But &lt;code&gt;rspec&lt;/code&gt; is forgiving and allows you to describe something by a
string&amp;nbsp;name:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Server&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;for unregistered users&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lists all text titles under /text&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;can show the full text under /text/:id&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;context&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;for registered users&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;accepts posts to /text as new text&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;deletes posts on /text/:id&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;updates posts on &lt;span class="caps"&gt;POST&lt;/span&gt; /text/:id&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;rack/test&lt;/code&gt; has not been included for nothing, it offers functions &lt;code&gt;get&lt;/code&gt;,
&lt;code&gt;post&lt;/code&gt;, &amp;#8230; that do requests to the localhost. To start the server, we need to
define an &lt;code&gt;app&lt;/code&gt; method, which is then started before the tests run. At the
moment, we don&amp;#8217;t have a class for that, but we can provide the standard
Sinatra&amp;nbsp;app.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;describe&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Server&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;
    &lt;span class="no"&gt;Sinatra&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Application&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A test could now look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lists all text titles under /text&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;last_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Humpty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;last_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should_not&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dumpty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get ...&lt;/code&gt; sends a get request to the server and saves the&amp;nbsp;response.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last_response&lt;/code&gt; can then be used to extract information about the
    answer, for example, if the text of the response contains&amp;nbsp;something.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now to the parametrized&amp;nbsp;requests:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;accepts posts to /text as new text&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The cat sat on the mat&amp;quot;&lt;/span&gt;

      &lt;span class="n"&gt;last_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt;
      &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="kp"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The Cat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You just add the parameters of the request as named parameters of the&amp;nbsp;query. &lt;/li&gt;
&lt;li&gt;You can test the response code of the&amp;nbsp;query.&lt;/li&gt;
&lt;li&gt;You can be very concise in ruby. Basically, the last line says &amp;#8220;&amp;#8216;The Cat&amp;#8217;
    should be among the titles of&amp;nbsp;texts&amp;#8221;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these building blocks, you probably can figure out 90% of your testing&amp;nbsp;needs.&lt;/p&gt;</summary></entry><entry><title>User Sessions and Layouts</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/user-sessions-and-layouts.html" rel="alternate"></link><updated>2012-10-05T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-05:2012/Oct/user-sessions-and-layouts.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html"&gt;Sinatra Story&lt;/a&gt;&amp;nbsp;series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The SinatraStory project now has a single model class, that is very simple and
allows everybody that can connect to the server to create and delete
everything. It seemed like a good idea at the time, but now it seems like an
even better idea would be to restrict access on a user basis. A user should
only be able to edit and delete their own&amp;nbsp;texts.&lt;/p&gt;
&lt;p&gt;This implementation is blatantly ripped off &lt;a href="http://www.128bitstudios.com/2011/11/21/authentication-with-sinatra/"&gt;Authentication with Sinatra&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First of all, we need a model for the user. Lets ignore the relation between
the user and the texts for the moment and focus on the login procedure. We
want the ability to sign up, to log in, and to log out. For this, we need some
new&amp;nbsp;routes:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/signup&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:signup&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/signup&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ... Create user ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/login&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ... Set current user ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/logout&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ... reset current user ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the thing is, to save a login, we need something called a &lt;em&gt;session&lt;/em&gt;. A
session is a piece of information stored on the server that relates to the
user, as such the user can not edit it. You might notice, that this is in
conflict to the &lt;span class="caps"&gt;REST&lt;/span&gt; principles, but still commonly done. To acknowledge that
this is not pure, we need to enable&amp;nbsp;it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# controller.rb&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="n"&gt;enable&lt;/span&gt; &lt;span class="ss"&gt;:sessions&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can imagine how a login and logout procedures would look&amp;nbsp;like:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/login&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="nb"&gt;fail&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No such login&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

  &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;redirect&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/logout&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
  &lt;span class="n"&gt;redirect&lt;/span&gt; &lt;span class="n"&gt;back&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Failing is an option and gives an error&amp;nbsp;page.&lt;/li&gt;
&lt;li&gt;The session looks like a&amp;nbsp;dictionary.&lt;/li&gt;
&lt;li&gt;You can redirect to the last page&amp;nbsp;visited.&lt;/li&gt;
&lt;li&gt;We store only the username in the session, because it takes
  less&amp;nbsp;space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similiarly, on signup you should create an account if the name is available.
Normally, we should also send the password twice, if the user&amp;nbsp;misstyped.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/signup&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pw2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:password2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

  &lt;span class="nb"&gt;fail&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Passwords not identical&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pw&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;pw2&lt;/span&gt;

  &lt;span class="nb"&gt;fail&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User name not available&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available?&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;

  &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;

  &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;username&lt;/span&gt;
  &lt;span class="n"&gt;redirect&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;span class="caps"&gt;HAML&lt;/span&gt; file for this is left up as an exercise to the&amp;nbsp;reader.&lt;/p&gt;
&lt;p&gt;Now it would be nice to have a layout around every of our pages that could
include the login. Unfortunately, that&amp;#8217;s not how it works, we need to edit it
into every view file&amp;nbsp;separately&amp;#8230;.&lt;/p&gt;
&lt;p&gt;Just kidding. There is the &lt;code&gt;layout.haml&lt;/code&gt; file, which is rendered around every
&lt;span class="caps"&gt;HAML&lt;/span&gt; file (partials not included). You can decide, where to put the inner page
by placing &lt;code&gt;= yield&lt;/code&gt; at the respective&amp;nbsp;point. &lt;/p&gt;
&lt;p&gt;This of course assumes, that there is exactly one point, which is filled in -
not very realistic: Typically, depending on the page, you would display
another page title or a slightly different sidebar. Sure, you could configure
it in the controller, but that would be awkward. Fortunately, there is a gem
that does that called &lt;code&gt;sinatra-outputbuffer&lt;/code&gt; - accept no substitutes!
Seriously, I tried 3 gems that offered this and that was the only one that
seemed to work. If you &lt;code&gt;require 'sinatra/outputbuffer'&lt;/code&gt; it, you can use the
commands &lt;code&gt;content_for :some_name&lt;/code&gt; to fill a part and 
&lt;code&gt;yield_content :some_name&lt;/code&gt; to leave the gap open to be filled&amp;nbsp;in.&lt;/p&gt;
&lt;p&gt;With this, we can write a layout&amp;nbsp;file:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nn"&gt;!!! 5&lt;/span&gt;
&lt;span class="nt"&gt;%head&lt;/span&gt;
  &lt;span class="nt"&gt;%title&lt;/span&gt;
    SinatraStory - 
    &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yield_content&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;
&lt;span class="nt"&gt;%body&lt;/span&gt;
  &lt;span class="nt"&gt;%aside&lt;/span&gt;
    &lt;span class="nf"&gt;#user&lt;/span&gt;
      &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
        &lt;span class="nt"&gt;%b&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="nt"&gt;%a&lt;/span&gt;(&lt;span class="na"&gt;href =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/logout&amp;quot;&lt;/span&gt;) logout
      &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nt"&gt;%form&lt;/span&gt;(&lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/login&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;POST&lt;/span&gt;&amp;quot;&lt;/span&gt;)
          &lt;span class="nt"&gt;%label&lt;/span&gt;
            Username
            &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;) 
          &lt;span class="nt"&gt;%label&lt;/span&gt;
            Password
            &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;)
          &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;)
        &lt;span class="nt"&gt;%a&lt;/span&gt;( &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/signup&amp;quot;&lt;/span&gt; ) Sign up
  &lt;span class="nt"&gt;%article&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!!! 5&lt;/code&gt; means it is converted to &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;5.&lt;/li&gt;
&lt;li&gt;The title is set to &amp;#8220;SinatraStory - &lt;subpage title&gt;&amp;#8220;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;@user&lt;/code&gt; is not nil, show the name and a logout&amp;nbsp;link.&lt;/li&gt;
&lt;li&gt;If it is, show the signup link and a login&amp;nbsp;field.&lt;/li&gt;
&lt;li&gt;Insert the bulk of the inner page into an &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now there&amp;#8217;s the user information on every&amp;nbsp;page!&lt;/p&gt;
&lt;p&gt;Or it were, if there was a &lt;code&gt;User&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;At the moment that class should store the user name and the password
information. Hopefully, the recent news about all kind of password leaks
made you cautious enough never to store any passwords in plain text into a
database. &lt;em&gt;Never, ever store a password in plain text!&lt;/em&gt; Yes, this is a toy
project, but if anybody copied this, it should at least be somewhat secure.
Always store passwords using a &lt;a href="http://en.wikipedia.org/wiki/Hash_function"&gt;hash function&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the following I will use BCrypt, not because it is fast, but because it is
slow. A slow hash function ensures, that a brute force cracking attempt with a
known hash takes long&amp;nbsp;enough.&lt;/p&gt;
&lt;p&gt;Anyway, include the &lt;code&gt;bcrypt-ruby&lt;/code&gt; gem and &lt;code&gt;require 'bcrypt'&lt;/code&gt; in your
&lt;code&gt;models.rb&lt;/code&gt; file. We don&amp;#8217;t want anyone to touch any of the attributes, so they
are read only. Besides the hash, we also generate a salt (a random value&amp;nbsp;basically).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:password_salt&lt;/span&gt;

  &lt;span class="vc"&gt;@@users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c1"&gt;# We store the users in a dictionary by user name.&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
    &lt;span class="vc"&gt;@@users&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_name&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
    &lt;span class="vc"&gt;@@users&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;available?&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
    &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="vc"&gt;@@users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key?&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Duplicated user&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vc"&gt;@@users&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key?&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="vc"&gt;@@users&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;

    &lt;span class="vc"&gt;@@users&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;This is similar to the Text class and should only be a problem in that it
    uses a dictionary instead of a&amp;nbsp;list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, it does not address the &lt;code&gt;initialize(name, password)&lt;/code&gt; and the
&lt;code&gt;User.login(name, password)&lt;/code&gt; methods.&lt;/p&gt;
&lt;p&gt;These should use the hash function, so I show you how separately. On user
creation, we will take the password and generate a hash for it and only store
that in the model. When we &lt;code&gt;login&lt;/code&gt;, we check that the passwords hash is the
same as the stored hash. Additionally, we add a random salt, so that two users
with the same password still have different&amp;nbsp;hashes.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;pw_salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BCrypt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_salt&lt;/span&gt;
  &lt;span class="n"&gt;pw_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;BCrypt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pw_salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="vi"&gt;@name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;
  &lt;span class="vi"&gt;@password_hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pw_hash&lt;/span&gt;
  &lt;span class="vi"&gt;@password_salt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pw_salt&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;login&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;
  &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vc"&gt;@@users&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;

  &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password_hash&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;BCrypt&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Engine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash_secret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password_salt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way, even if your database was compromised and leaked, the users would be
relatively&amp;nbsp;save.&lt;/p&gt;
&lt;p&gt;That was the complicated part, the rest will not give anyone headaches. What
remains is to ensure, that texts are owned by someone and that only that
someone can edit them. Obviously we need to extend the &lt;code&gt;Text&lt;/code&gt; class to have a
&lt;code&gt;User&lt;/code&gt; it belongs&amp;nbsp;to:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# models.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:user&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;editable?&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the &lt;code&gt;User&lt;/code&gt; to contain the&amp;nbsp;texts:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# models.rb&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@texts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;texts&lt;/span&gt;
    &lt;span class="vi"&gt;@texts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dup&lt;/span&gt; &lt;span class="c1"&gt;# use copy&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;new_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@texts&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;new_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_text&lt;/span&gt;
    &lt;span class="n"&gt;new_text&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;deleted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@texts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The controller should check if the action is allowed. We&amp;#8217;ll use the current
user (not the current user name) a lot, so it makes sense to fetch it before
anything else&amp;nbsp;happens:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# controller.rb&lt;/span&gt;

&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="vi"&gt;@user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;by_name&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:username&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the controller needs to ensure, that a user might only do allowed&amp;nbsp;operations:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;401&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;editable?&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;

  &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;redirect&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/text/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and for creation the same. Finally, we can&amp;nbsp;wrap &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;editable?&lt;/span&gt; &lt;span class="vi"&gt;@user&lt;/span&gt;
  &lt;span class="nt"&gt;%ul&lt;/span&gt;
    &lt;span class="nt"&gt;%li&lt;/span&gt;
      &lt;span class="nt"&gt;%a&lt;/span&gt;(&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/text/#{text.id}/edit&amp;quot;&lt;/span&gt;) edit
    &lt;span class="nt"&gt;%li&lt;/span&gt;
      &lt;span class="nt"&gt;%form&lt;/span&gt;(&lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/text/#{text.id}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;POST&lt;/span&gt;&amp;quot;&lt;/span&gt;)
        &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;name =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_method&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;delete&amp;quot;&lt;/span&gt;)
        &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;delete&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and similarly for the &amp;#8220;new text&amp;#8221;&amp;nbsp;link.&lt;/p&gt;
&lt;p&gt;This adds some security to our page. You could now add a per user listing, a
profile for each user, &amp;#8230; but you could do that with what you already know.
Try&amp;nbsp;it!&lt;/p&gt;
&lt;p&gt;You should now&amp;nbsp;know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What a session is and how to use&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;How to use the &lt;code&gt;layout.haml&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;How to use &lt;code&gt;yield_content&lt;/code&gt; and &lt;code&gt;content_for&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;That you should &lt;em&gt;never&lt;/em&gt; store plain text passwords and how to use a hash
    function with&amp;nbsp;salt.&lt;/li&gt;
&lt;li&gt;How to make relations between model&amp;nbsp;classes.&lt;/li&gt;
&lt;li&gt;Ensure that restricted operations are executed only with the valid&amp;nbsp;user.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Putting, Modifying and the REST</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/putting-modifying-and-the-rest.html" rel="alternate"></link><updated>2012-10-04T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-04:2012/Oct/putting-modifying-and-the-rest.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html"&gt;Sinatra Story&lt;/a&gt;&amp;nbsp;series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Until now, the texts had to be hard coded into the fixture. That of course is
just ridiculous for a webapp. The whole point of an application like this is
that it is interactive, so that I can publish my own texts, modify my old ones
and delete the&amp;nbsp;garbage.&lt;/p&gt;
&lt;p&gt;As you might know, the &lt;span class="caps"&gt;HTTP&lt;/span&gt; has four main&amp;nbsp;verbs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;GET&lt;/span&gt;&lt;/em&gt;: A content is shown, no modification should&amp;nbsp;occur.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;POST&lt;/span&gt;&lt;/em&gt;: Modify a content by sending the server&amp;nbsp;information.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;PUT&lt;/span&gt;&lt;/em&gt;: Create new content on the server by&amp;nbsp;&lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;DELETE&lt;/span&gt;&lt;/em&gt;: What do you&amp;nbsp;think?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some others, but these four help you design your interface. For
example, our application manages texts, so the following requests should be&amp;nbsp;possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET /text&lt;/code&gt; should display a list of all&amp;nbsp;texts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PUT /text&lt;/code&gt; should publish a new&amp;nbsp;text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /text/:id&lt;/code&gt; should display the text with the given&amp;nbsp;id.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /text/:id&lt;/code&gt; should modify the&amp;nbsp;text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DELETE /text/:id&lt;/code&gt; &amp;#8230;What do you&amp;nbsp;think?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using only meaningful URLs and &lt;span class="caps"&gt;HTTP&lt;/span&gt; methods and not cookies, etc, to navigate
the user through the site is known as
&lt;a href="http://en.wikipedia.org/wiki/Representational_state_transfer"&gt;&lt;span class="caps"&gt;REST&lt;/span&gt;&lt;/a&gt;.
Not only does it give an simple interface, it also helps performance, etc.
Putting a cool new name on it like &amp;#8220;&lt;span class="caps"&gt;REST&lt;/span&gt;&amp;#8221; on it hides the fact, that this was
how the makers of &lt;span class="caps"&gt;HTTP&lt;/span&gt; imagined the web all&amp;nbsp;along.&lt;/p&gt;
&lt;p&gt;Sinatra is RESTful by default, but of course, you have to take care of the
URLs yourself. The last time, we defined the two &lt;code&gt;GET&lt;/code&gt; methods, so lets add
publishing a new text&amp;nbsp;first:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty easy, huh? The &lt;code&gt;params&lt;/code&gt; will come from a form, but that&amp;#8217;s not our
problem&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Next, we can post&amp;nbsp;changes:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;

  &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This mixes the two sources for &lt;code&gt;params&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;

  &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, &lt;em&gt;now&lt;/em&gt; we can face the problem, that we can&amp;#8217;t actually access these
methods, since we don&amp;#8217;t have a form for the editing part&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;First of all, we notice that it would be stupid to write the same form twice -
once for the editing and once for the creating. We&amp;#8217;d prefer to just show the
same form. This problem can be solved with &lt;em&gt;partials&lt;/em&gt;: basically, we insert a
&lt;span class="caps"&gt;HAML&lt;/span&gt; call into the &lt;span class="caps"&gt;HAML&lt;/span&gt; template. Define a &lt;span class="caps"&gt;HAML&lt;/span&gt; file &lt;code&gt;form.haml&lt;/code&gt;, and use it
from both &lt;code&gt;new.haml&lt;/code&gt; and &lt;code&gt;edit.haml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# form.haml

&lt;span class="nt"&gt;%form&lt;/span&gt;(&lt;span class="na"&gt;action =&lt;/span&gt; &lt;span class="nv"&gt;actionurl&lt;/span&gt; &lt;span class="na"&gt;method =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;POST&lt;/span&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class="nt"&gt;%label&lt;/span&gt;
    Title:
    &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#{title}&amp;quot;&lt;/span&gt;)
  &lt;span class="nt"&gt;%label&lt;/span&gt;
    Text:
    &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;textarea&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#{text}&amp;quot;&lt;/span&gt;)
  &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;)

# edit.haml

&lt;span class="nt"&gt;%h1&lt;/span&gt;
  Edit
  &lt;span class="nt"&gt;%q&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="vi"&gt;@text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="vi"&gt;@text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:actionurl&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="vi"&gt;@text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

# new.haml

&lt;span class="nt"&gt;%h1&lt;/span&gt; New Txt
&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:actionurl&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to add URLs for the form of course, for&amp;nbsp;example &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;get &amp;quot;/text/new&amp;quot; do
    haml :new
end

get &amp;quot;text/:id/edit&amp;quot; do
    @text = Text.by_id(params[:id].to_i)

    haml :edit
end
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Instead of adding &lt;code&gt;:locals&lt;/code&gt;, you can also define instance variables. This is
    often&amp;nbsp;preferable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is only putting the respective links into the&amp;nbsp;views:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# index.haml
&lt;span class="nt"&gt;%ul&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;texts&lt;/span&gt;
    &lt;span class="nt"&gt;%li&lt;/span&gt;
      &lt;span class="nt"&gt;%a&lt;/span&gt;( &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/text/#{text.id}&amp;quot;&lt;/span&gt; )&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="nt"&gt;%a&lt;/span&gt;( &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/text/new&amp;quot;&lt;/span&gt; ) new text

# show.haml
&lt;span class="nt"&gt;%h1&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="nt"&gt;%div&lt;/span&gt;
  &lt;span class="nd"&gt;:markdown&lt;/span&gt;
    &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;%ul&lt;/span&gt;
  &lt;span class="nt"&gt;%li&lt;/span&gt;
    &lt;span class="nt"&gt;%a&lt;/span&gt;(&lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/text/#{text.id}&amp;quot;&lt;/span&gt;) edit
  &lt;span class="nt"&gt;%li&lt;/span&gt;
    &lt;span class="nt"&gt;%form&lt;/span&gt;(&lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/text/#{text.id}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;POST&lt;/span&gt;&amp;quot;&lt;/span&gt;)
      &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;name =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_method&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hidden&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;delete&amp;quot;&lt;/span&gt;)
      &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;delete&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You might be wondering, what the heck the&amp;nbsp;line &lt;/p&gt;
&lt;p&gt;&lt;code&gt;%input(name ="_method" type="hidden" value="delete")&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is about. Fun fact: Browsers can&amp;#8217;t use &lt;code&gt;PUT&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt;. It&amp;#8217;s embarrassing
but true. The fix is the following: We sent a &lt;code&gt;POST&lt;/code&gt;, which tells the server
that it actually should have been a &lt;code&gt;DELETE&lt;/code&gt; method. Sinatra understands this and&amp;nbsp;translates.&lt;/p&gt;
&lt;p&gt;Please don&amp;#8217;t let &lt;code&gt;GET&lt;/code&gt; requests change anything on the server, or a google
spider might delete all your&amp;nbsp;posts.&lt;/p&gt;
&lt;p&gt;You should now&amp;nbsp;know&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What &lt;span class="caps"&gt;REST&lt;/span&gt; is and how RESTful application typically build up their&amp;nbsp;URLs.&lt;/li&gt;
&lt;li&gt;How to use&amp;nbsp;partials.&lt;/li&gt;
&lt;li&gt;How to use the &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; methods, even though browsers don&amp;#8217;t
    support&amp;nbsp;it.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>The Story of how I built a Model</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/the-story-of-how-i-built-a-model.html" rel="alternate"></link><updated>2012-10-03T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-03:2012/Oct/the-story-of-how-i-built-a-model.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html"&gt;Sinatra Story&lt;/a&gt;&amp;nbsp;series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So in this text, I will actually build a very simple Webapp including data
that is stored on the server. I will not use a database, so as not to
complicate&amp;nbsp;things. &lt;/p&gt;
&lt;p&gt;The project is the following: I like to write stories in my free time, but
with my notes all over time and space (I don&amp;#8217;t know, where they&amp;#8217;re
getting lost), it gets quite annoying. Also the notes are completely
disorganized, but that we will fix&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;So the idea is to have a web application that stores my stories. For now, lets
assume, that the stories only have a title and a&amp;nbsp;body.&lt;/p&gt;
&lt;p&gt;In ruby, classes don&amp;#8217;t need no stupid type declarations, you just call it
&lt;code&gt;@variablename&lt;/code&gt; and the &amp;#8216;@&amp;#8217; tells us that it has instance scope and the
variable can hold a string, a number, or any object. Similarily
&lt;code&gt;@@classvariable&lt;/code&gt; has class scope. The first, we won&amp;#8217;t even see, because Ruby
can define getters and setters automatically with the &lt;code&gt;attr_accessor&lt;/code&gt;
function, to which you give &lt;em&gt;symbols&lt;/em&gt; - strings that signify a name. The
minimal class, that has a publicly accessable text and title&amp;nbsp;is&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But we want a constructor, which is called &lt;code&gt;initialize&lt;/code&gt; in ruby and some
management of all the entities, e.g. displaying all&amp;nbsp;Texts.&lt;/p&gt;
&lt;p&gt;The constructor only passes the arguments to the&amp;nbsp;setters:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;def&lt;/code&gt; defines methods (or functions) in the current scope and &lt;code&gt;self&lt;/code&gt; is
&lt;em&gt;always&lt;/em&gt; bound to the current&amp;nbsp;object.&lt;/p&gt;
&lt;p&gt;Now we need a class scoped set of all the Texts, preferably only the ones we
save (think of tests, where we generate Texts that should not appear in the&amp;nbsp;set).&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="vc"&gt;@@texts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;
    &lt;span class="vc"&gt;@@texts&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vc"&gt;@@texts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;include?&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, that&amp;#8217;s a bit to&amp;nbsp;digest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@@texts = []&lt;/code&gt; initializes the class scoped variable with an empty list&amp;nbsp;literal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;save&lt;/code&gt; does not take any arguments, we don&amp;#8217;t need to write the parens in
    method&amp;nbsp;declarations.&lt;/li&gt;
&lt;li&gt;The shift operator adds the element to the&amp;nbsp;list.&lt;/li&gt;
&lt;li&gt;The postfix &lt;code&gt;unless&lt;/code&gt; (or &lt;code&gt;if&lt;/code&gt;) is an idiomatic way to write one-line
    conditional statements. It is equivalent&amp;nbsp;to &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ruby
    unless @@texts.include? self
      @@texts &amp;lt;&amp;lt; self
    end&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;but is much more readable.
* &lt;code&gt;include?&lt;/code&gt; is a valid method name and indeed idiomatic for predicates
    (methods, that return true or false). Again, you don&amp;#8217;t need to write the
  parens on the method calls (fun fact: attr_accessor is a method&amp;nbsp;too).&lt;/p&gt;
&lt;p&gt;That said, the delete method should be&amp;nbsp;simple&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;
    &lt;span class="vc"&gt;@@texts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt;
    &lt;span class="vc"&gt;@@texts&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but the &lt;code&gt;all&lt;/code&gt; method needs some explaining&amp;nbsp;again:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember how &lt;code&gt;self&lt;/code&gt; is &lt;em&gt;always&lt;/em&gt; bound to the current object? In the body of
    a class, that object is the class you&amp;#8217;re currently defining! That&amp;#8217;s why
  &lt;code&gt;def self.all&lt;/code&gt; defines the method &lt;code&gt;all&lt;/code&gt; in the class, not the&amp;nbsp;instances.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, lets add a unique identifier with what we have&amp;nbsp;learned:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Text&lt;/span&gt;
  &lt;span class="kp"&gt;attr_accessor&lt;/span&gt; &lt;span class="ss"&gt;:text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:title&lt;/span&gt;

  &lt;span class="vc"&gt;@@text_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
    &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="vi"&gt;@id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vc"&gt;@@text_count&lt;/span&gt;
    &lt;span class="vc"&gt;@@text_count&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;id&lt;/span&gt;
    &lt;span class="vi"&gt;@id&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and add a&amp;nbsp;lookup:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_id&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;
    &lt;span class="vc"&gt;@@texts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;detect&lt;/code&gt; method takes a block, that is an executable part of code. This
    block is evaluated and the method returns the first element, for which the
  block returns &lt;code&gt;true&lt;/code&gt;. In the same fashion, there&amp;nbsp;are&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;: returns a list of all the elements, for which the block is&amp;nbsp;true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collect&lt;/code&gt;: returns a list of all the return values for the block executed
    on the&amp;nbsp;elements&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inject&lt;/code&gt;: &amp;#8230; Lets not get into &lt;a href="http://en.wikipedia.org/wiki/Fold_(higher-order_function)"&gt;that&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is all there is to do for the model&amp;nbsp;part.&lt;/p&gt;
&lt;p&gt;Now we can present that with Sinatra, we need to require the models file as
well and pass the&amp;nbsp;variables.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./models.rb&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:texts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;

  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Note that I converted the parameter &lt;code&gt;id&lt;/code&gt; to an integer before handing it to
    the &lt;code&gt;#by_id&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;I can return the &amp;#8216;not found&amp;#8217; code 404 directly, if&amp;#8230; well&amp;#8230; I didn&amp;#8217;t find
    the text with the&amp;nbsp;id.&lt;/li&gt;
&lt;li&gt;We can extract parameters from a &lt;code&gt;get&lt;/code&gt; request (or any request really), by
    marking the variable with a colon (like a&amp;nbsp;symbol).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, we can display all that with two haml&amp;nbsp;files:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# index.haml
&lt;span class="nt"&gt;%ul&lt;/span&gt;
  &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;texts&lt;/span&gt;
    &lt;span class="nt"&gt;%li&lt;/span&gt;
      &lt;span class="nt"&gt;%a&lt;/span&gt;( &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/text/#{text.id}&amp;quot;&lt;/span&gt; )&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This displays links to all texts in an unsorted list showing their&amp;nbsp;title.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In a ruby string, you can put a ruby expression between &lt;code&gt;#{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;, and it
    will insert the value into the&amp;nbsp;string.&lt;/li&gt;
&lt;li&gt;In &lt;span class="caps"&gt;HAML&lt;/span&gt;, you can define attributes of a block (in this example &lt;code&gt;a&lt;/code&gt;) by
    putting them in parens. The right hand side of the equal signs are ruby&amp;nbsp;expressions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, we need to add a file to show a single&amp;nbsp;text:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# show.haml
&lt;span class="nt"&gt;%h1&lt;/span&gt;
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="nt"&gt;%div&lt;/span&gt;
  &lt;span class="nd"&gt;:markdown&lt;/span&gt;
    &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;In &lt;span class="caps"&gt;HAML&lt;/span&gt;, when we prepose a paragraph with a filter name, like &lt;code&gt;markdown&lt;/code&gt;,
    then that is processed through that. Note however, that prefixing something
  with &lt;code&gt;=&lt;/code&gt; does no longer insert&amp;nbsp;it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, if we run that program, it will not show anything, in lack of any
texts and also a way to add them. For the moment, we can fix that by adding a
&lt;em&gt;fixture&lt;/em&gt; to the controller&amp;nbsp;file:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;./models.rb&amp;#39;&lt;/span&gt;

&lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Humpty Dumpty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Humpty Dumpty sat on the wall...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:texts&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/text/:id&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;by_id&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nil?&lt;/span&gt;

  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:show&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:text&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Ruby objects are initialized by the &lt;code&gt;#new&lt;/code&gt; method of the class, which in
    turn runs the &lt;code&gt;#initialize&lt;/code&gt; method of the new&amp;nbsp;object.&lt;/li&gt;
&lt;li&gt;There is no magic &amp;#8220;fixture&amp;#8221; file, the fixture is just some code that adds
    objects to the&amp;nbsp;collection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That concludes this. We can now build a simple model and know how to build a
in-memory database. The rest should be a breeze,&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Next time, I&amp;#8217;ll show you, how to make the application understand request like
&amp;#8220;add this text&amp;#8221; and &amp;#8220;this text sucks, change it&amp;#8221; and also &amp;#8220;this text sucks so
much, forget it ever existed&amp;#8221;. You will see, that the designers of the &lt;span class="caps"&gt;HTTP&lt;/span&gt;
protocol had something like that in&amp;nbsp;mind.&lt;/p&gt;</summary></entry><entry><title>SinatraStory</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatrastory.html" rel="alternate"></link><updated>2012-10-02T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-02:2012/Oct/sinatrastory.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html"&gt;Sinatra Story&lt;/a&gt;&amp;nbsp;series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hi there! In this tutorial, I&amp;#8217;ll show you how you can build web apps in the
ruby &lt;a href="http://www.sinatrarb.com/"&gt;Sinatra&lt;/a&gt; framework. As web frameworks go,
Sinatra is a very simplistic one, as opposed to for example &lt;a href="http://rubyonrails.org/"&gt;Rails&lt;/a&gt;
which is huge, does everything for you and leaves you with a feeling of not
knowing, what the heck is going on. I&amp;#8217;m not saying that that is necessarily
bad, if you accept it, it allows for very fast development. Sinatra on the
other hand gives the developer much more freedom and actually feels more like
a nice library than a&amp;nbsp;framework. &lt;/p&gt;
&lt;p&gt;The canonical &lt;code&gt;hello world&lt;/code&gt; example uses only a single file and goes like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# hello.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if you run it with &lt;code&gt;ruby hello.rb&lt;/code&gt; and head to
&lt;a href="http://localhost:4567"&gt;localhost:4567&lt;/a&gt;, you get the rewarding &amp;#8220;Hello&amp;nbsp;World&amp;#8221;.&lt;/p&gt;
&lt;p&gt;But you wouldn&amp;#8217;t call that a web application yet. In the first step, let us
figure out, how to write html. If we were really hardcore, we could just write
it into the return value of our&amp;nbsp;method:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# hello2.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but who does that? Nobody, that&amp;#8217;s who! Well, at least not a software aesthete
as myself. I personally prefer &lt;a href="http://haml.info"&gt;&lt;span class="caps"&gt;HAML&lt;/span&gt;&lt;/a&gt;, which translates directly
into &lt;span class="caps"&gt;HTML&lt;/span&gt;, but removes all the boilerplate. Fortunately, it is really easy to
use with&amp;nbsp;Sinatra:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# hello2.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;haml&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%h1 Hello World&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;because &lt;code&gt;haml&lt;/code&gt; just converts the string into &lt;span class="caps"&gt;HTML&lt;/span&gt; and returns that. If you
know the &lt;a href="http://en.wikipedia.org/wiki/Model_View_Controller"&gt;&lt;span class="caps"&gt;MVC&lt;/span&gt;&lt;/a&gt; pattern,
you should recognize, that Sinatra provides the &lt;em&gt;controller&lt;/em&gt; part, so it
should grab some &lt;em&gt;model&lt;/em&gt; parts and redirect them to the &lt;em&gt;view&lt;/em&gt;. Ok,
admittedly, we don&amp;#8217;t need a model at this point, but it would be nice to
separate the controller part from the view part, so we should move the &lt;span class="caps"&gt;HAML&lt;/span&gt;
code to a separate&amp;nbsp;file:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# views/hello3.haml
&lt;span class="nt"&gt;%h1&lt;/span&gt; Hello World
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# hello3.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;haml&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:hello3&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sinatra will look for the &amp;#8220;views&amp;#8221; folder and find the matching&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Now we can start adding some actual fuctionality to it: The Hello World is a
bit unpersonal, so lets add that: First of all, we need a form, in which we
ask the user for their name and then direct to a page in which displays the
Hello User&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;For this, you need to know, that &lt;span class="caps"&gt;HTTP&lt;/span&gt; has &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; commands, the
latter of which pushes new information onto the server. That kind of reflects,
what we want, so we add a new&amp;nbsp;route:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/greet&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In that route, we want to display the Hello User, so the &lt;span class="caps"&gt;HAML&lt;/span&gt; will look&amp;nbsp;like&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# views/greet.haml
&lt;span class="nt"&gt;%h1&lt;/span&gt; 
  Hello
  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;greetee&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;=&lt;/code&gt; tells haml to evaluate the &lt;code&gt;greetee&lt;/code&gt; and display it. Now we only need
to define the &lt;code&gt;greetee&lt;/code&gt; variable in this&amp;nbsp;context:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# routes.rb&lt;/span&gt;
&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/greet&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:greet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:greetee&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:greetee&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; variable, as you might have guessed, gives a dictionary of the
parameters, that were sent to the server in this request. &lt;code&gt;locals&lt;/code&gt; defines,
what variables can be used in the &lt;span class="caps"&gt;HAML&lt;/span&gt;&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;Now we need a form that queries the&amp;nbsp;name:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# routes.rb &lt;/span&gt;
&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;haml&lt;/span&gt; &lt;span class="ss"&gt;:index&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;# views/index.haml
&lt;span class="nt"&gt;%form&lt;/span&gt;(&lt;span class="na"&gt;action =&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/greet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;span class="caps"&gt;POST&lt;/span&gt;&amp;quot;&lt;/span&gt;)
  &lt;span class="nt"&gt;%label&lt;/span&gt; 
    Name:
    &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;text&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;name =&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;greetee&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;)
  &lt;span class="nt"&gt;%input&lt;/span&gt;(&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;submit&amp;#39;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This form gives a single text field, that is sent back under the name of
&lt;code&gt;:greetee&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt;s it to the &amp;#8220;/greet&amp;#8221; &lt;span class="caps"&gt;URL&lt;/span&gt;. As you can see, it is very
straight forward what is&amp;nbsp;happening.&lt;/p&gt;
&lt;p&gt;Now, when you run it and go to the &lt;a href="http://localhost:4567"&gt;localhost:4567&lt;/a&gt;, you get a
form, and if you enter &amp;#8220;Tim&amp;#8221; into the form field, the greeting will be &amp;#8220;Hello
Tim&amp;#8221; instead of &amp;#8220;Hello&amp;nbsp;World&amp;#8221;.&lt;/p&gt;
&lt;p&gt;That is enough for the first iteration, the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/the-story-of-how-i-built-a-model.html"&gt;next time&lt;/a&gt;, I&amp;#8217;ll show you, how you
can use a model too. Hint: It is just plain&amp;nbsp;ruby.&lt;/p&gt;</summary></entry><entry><title>Installing Ruby and Sinatra</title><link href="http://zombiecalypse.github.com/Blog/2012/Oct/installing-ruby-and-sinatra.html" rel="alternate"></link><updated>2012-10-01T00:00:00+02:00</updated><author><name>Zombiecalypse</name></author><id>tag:zombiecalypse.github.com/Blog,2012-10-01:2012/Oct/installing-ruby-and-sinatra.html</id><summary type="html">&lt;p&gt;&lt;em&gt;This article is part of the &lt;a href="http://zombiecalypse.github.com/Blog/2012/Oct/sinatra-story.html"&gt;Sinatra Story&lt;/a&gt;&amp;nbsp;series.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hi there, so before we can get started with the Sinatra framework, we need to
get it to run in the first place, so here is how you get ruby and&amp;nbsp;Sinatra.&lt;/p&gt;
&lt;h2&gt;Getting&amp;nbsp;Ruby&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;: You&amp;#8217;re probably in for some pain, consider dual-booting with linux or
&lt;a href="http://www.cygwin.com/"&gt;cygwin&lt;/a&gt;. You should also look at
&lt;a href="https://rvm.io/rvm/install/"&gt;rvm&lt;/a&gt;
(&lt;a href="http://blog.developwithpassion.com/2012/03/30/installing-rvm-with-cygwin-on-windows/"&gt;here&lt;/a&gt;
is a tutorial how to install it in&amp;nbsp;cygwin)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mac &lt;span class="caps"&gt;OSX&lt;/span&gt;&lt;/strong&gt;: I heard &lt;a href="http://macruby.org/"&gt;MacRuby&lt;/a&gt; was a good choice. You
    can also use &lt;a href="https://rvm.io/rvm/install/"&gt;rvm&lt;/a&gt; with the &lt;a href="http://unfiniti.com/software/mac/jewelrybox"&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt;&lt;/a&gt; for&amp;nbsp;&lt;span class="caps"&gt;OSX&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;: I recommend using &lt;a href="https://rvm.io/rvm/install/"&gt;rvm&lt;/a&gt; and
    installing it as the website recommends. For example Ubuntu still uses the 
    &lt;code&gt;1.8&lt;/code&gt; version of ruby by default and you can&amp;#8217;t install personal gems. After
  installing &lt;code&gt;rvm&lt;/code&gt;, run &lt;code&gt;rvm install 1.9.2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting&amp;nbsp;Bundler&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://gembundler.com/"&gt;Bundler&lt;/a&gt; manages dependencies to other libraries
(called &amp;#8220;gems&amp;#8221;). You list the gems your application needs in the application
root directory in a file with the name &lt;code&gt;Gemfile&lt;/code&gt;. The next guy trying to use
your application can then simply run &lt;code&gt;bundle install&lt;/code&gt; and all dependencies are&amp;nbsp;resolved.&lt;/p&gt;
&lt;p&gt;To get &lt;code&gt;bundler&lt;/code&gt;, just run &lt;code&gt;gem install bundler&lt;/code&gt; in a terminal. If you
installed ruby via rvm, that should work, otherwise look at 
&lt;a href="http://rubygems.org/pages/download"&gt;the ruby gems installation page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Starting a Sinatra&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;Make a new directory, in which you make a new file &lt;code&gt;Gemfile&lt;/code&gt;, in there, add
the repository for the gems first, and then the&amp;nbsp;dependencies:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra-contrib&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;haml&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now switch to the directory in a terminal and run &lt;code&gt;bundle install&lt;/code&gt;, then wait.
Now you can try the Hello World from &lt;a href="http://www.sinatrarb.com/"&gt;Sinatra&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# hello.rb&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/hi&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then run &lt;code&gt;ruby hello.rb&lt;/code&gt;. If there are no errors, sinatra is installed just
fine. You can exit the server with &lt;code&gt;Ctrl+C&lt;/code&gt;.&lt;/p&gt;</summary></entry></feed>